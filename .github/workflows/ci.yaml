name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22']
    
    steps:
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Cache Go modules
      uses: actions/cache@v4 
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
    
    # - name: Generate coverage report
    #   run: go tool cover -html=coverage.out -o coverage.html
    
    # - name: Upload coverage reports
    #   uses: actions/upload-artifact@v4 
    #   with:
    #     name: coverage-report-go${{ matrix.go-version }}
    #     path: |
    #       coverage.out
    #       coverage.html
    
    # - name: Check coverage threshold
    #   run: |
    #     COVERAGE=$(go tool cover -func=coverage.out | grep total | grep -Eo '[0-9]+\.[0-9]+')
    #     echo "Total coverage: ${COVERAGE}%"
    #     if (( $(echo "${COVERAGE} < 80.0" | bc -l) )); then
    #       echo "Coverage ${COVERAGE}% is below threshold 80%"
    #       exit 1
    #     fi

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Set up Go
      uses: actions/setup-go@v5  
      with:
        go-version: '1.22'
    
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Cache Go modules
      uses: actions/cache@v4 
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-lint-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-lint-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v4 
      with:
        version: latest
        args: --timeout=5m --config=.golangci.yaml

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Set up Go
      uses: actions/setup-go@v5 
      with:
        go-version: '1.22'
    
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Create build directory
      run: mkdir -p build
    
    - name: Build for multiple platforms
      run: |
        GOOS=linux GOARCH=amd64 go build -o build/ueba-generator-linux-amd64 ./cmd/ueba-generator
        GOOS=windows GOARCH=amd64 go build -o build/ueba-generator-windows-amd64.exe ./cmd/ueba-generator
        GOOS=darwin GOARCH=amd64 go build -o build/ueba-generator-darwin-amd64 ./cmd/ueba-generator
        GOOS=darwin GOARCH=arm64 go build -o build/ueba-generator-darwin-arm64 ./cmd/ueba-generator
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4  
      with:
        name: binaries
        path: build/
        compression-level: 6  
        retention-days: 30    
