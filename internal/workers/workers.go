package workers

import (
	"context"
	"log"
	"runtime"
	"sync"
	"time"

	"github.com/nashabanov/ueba-event-generator/internal/metrics"
)

type Job interface {
	Execute() error
}

type WorkerPool struct {
	workerCount int            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ worker'–æ–≤
	jobQueue    chan Job       // –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á
	quit        chan bool      // –°–∏–≥–Ω–∞–ª –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
	wg          sync.WaitGroup // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö worker'–æ–≤
	poolType    string         // ‚úÖ –ù–û–í–û–ï –ü–û–õ–ï –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
}

func NewWorkerPool(workerCount int, queueSize int) *WorkerPool {
	// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ worker'–æ–≤
	if workerCount <= 0 {
		// CPU-intensive: NumCPU
		// I/O-intensive: NumCPU * 2-4
		workerCount = runtime.NumCPU() * 3
	}

	return &WorkerPool{
		workerCount: workerCount,
		jobQueue:    make(chan Job, queueSize), // Buffered channel
		quit:        make(chan bool),
		poolType:    "generic", // ‚úÖ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}
}

func (wp *WorkerPool) SetPoolType(poolType string) {
	wp.poolType = poolType
}

func (wp *WorkerPool) Start(ctx context.Context) {
	// –ó–∞–ø—É—Å–∫–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ worker'–æ–≤
	for i := 0; i < wp.workerCount; i++ {
		wp.wg.Add(1)         // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ WaitGroup
		go wp.worker(i, ctx) // –ö–∞–∂–¥—ã–π worker –≤ —Å–≤–æ–µ–π goroutine
	}
}

func (wp *WorkerPool) worker(id int, ctx context.Context) {
	defer wp.wg.Done()

	globalMetrics := metrics.GetGlobalMetrics()
	globalMetrics.IncrementActiveWorkers()
	defer globalMetrics.DecrementActiveWorkers()

	log.Printf("üöÄ Worker %d –∑–∞–ø—É—â–µ–Ω", id)

	poolType := "unknown"
	if wp.poolType != "" {
		poolType = wp.poolType
	}

	log.Printf("üöÄ Worker %s-%d –∑–∞–ø—É—â–µ–Ω", poolType, id)

	for {
		select {
		case job := <-wp.jobQueue:
			if job != nil {
				startTime := time.Now()

				if err := job.Execute(); err != nil {
					log.Printf("‚ùå Worker %d: –æ—à–∏–±–∫–∞ –∑–∞–¥–∞—á–∏: %v", id, err)
				} else {
					globalMetrics.IncrementCompletedJobs()
				}

				processingTime := time.Since(startTime)
				globalMetrics.RecordProcessingTime(processingTime)
			}

		case <-wp.quit:
			log.Printf("üõë Worker %s-%d: –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Å—å", poolType, id)
			return

		case <-ctx.Done():
			log.Printf("‚è±Ô∏è Worker %s-%d: context –æ—Ç–º–µ–Ω–µ–Ω", poolType, id)
			return
		}
	}
}

func (wp *WorkerPool) Submit(job Job) bool {
	globalMetrics := metrics.GetGlobalMetrics()

	select {
	case wp.jobQueue <- job:
		globalMetrics.SetQueuedJobs(uint64(len(wp.jobQueue)))
		return true
	default:
		globalMetrics.IncrementRejectedJobs()
		return false
	}
}

func (wp *WorkerPool) Stop() {
	close(wp.quit)     // –ó–∞–∫—Ä—ã–≤–∞–µ–º channel - –≤—Å–µ worker'—ã –ø–æ–ª—É—á–∞—Ç —Å–∏–≥–Ω–∞–ª
	wp.wg.Wait()       // –ñ–¥–µ–º –ø–æ–∫–∞ –≤—Å–µ worker'—ã –∑–∞–≤–µ—Ä—à–∞—Ç—Å—è
	close(wp.jobQueue) // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å
}
