// coordinator/pipeline.go

package coordinator

import (
	"context"
	"fmt"
	"sync"

	"github.com/nashabanov/ueba-event-generator/internal/pipeline/stages"
)

// Pipeline - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–∞–π–ø–ª–∞–π–Ω–∞
type Pipeline interface {
	// Lifecycle - –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª
	Start(ctx context.Context) error
	Stop() error

	// Configuration - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
	AddStage(stage Stage) error

	// Monitoring - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
	GetStatus() PipelineStatus
}

// Stage - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —ç—Ç–∞–ø–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞
type Stage interface {
	Name() string
	// –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª ready –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
	Run(ctx context.Context, in <-chan *stages.SerializedData, out chan<- *stages.SerializedData, ready chan<- bool) error
}

type PipelineStatus int

const (
	Stopped PipelineStatus = iota
	Starting
	Running
	Stopping
	Error
)

// pipelineImpl - —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞
type pipelineImpl struct {
	// –°–æ—Å—Ç–æ—è–Ω–∏–µ
	status PipelineStatus
	mu     sync.RWMutex // –∑–∞—â–∏—â–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞

	stages   []Stage                       // —Å–ø–∏—Å–æ–∫ —ç—Ç–∞–ø–æ–≤
	channels []chan *stages.SerializedData // –∫–∞–Ω–∞–ª –º–µ–∂–¥—É —Å—Ç–∞–¥–∏—è–º–∏

	// –í—Ö–æ–¥–Ω–æ–π –∏ –≤—ã—Ö–æ–¥–Ω–æ–π –∫–∞–Ω–∞–ª—ã
	inputChan  chan *stages.SerializedData
	outputChan chan *stages.SerializedData

	// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
	ctx    context.Context
	cancel context.CancelFunc
	wg     sync.WaitGroup

	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
	bufferSize int
}

// NewPipeline —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞–π–ø–ª–∞–π–Ω–∞
func NewPipeline(bufferSize int) Pipeline {
	return &pipelineImpl{
		status:     Stopped,
		stages:     make([]Stage, 0),
		channels:   make([]chan *stages.SerializedData, 0),
		inputChan:  make(chan *stages.SerializedData, bufferSize),
		outputChan: make(chan *stages.SerializedData, bufferSize),
		bufferSize: bufferSize,
	}
}

// GetStatus –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–∞–π–ø–ª–∞–π–Ω–∞
func (p *pipelineImpl) GetStatus() PipelineStatus {
	p.mu.RLock()
	defer p.mu.RUnlock()
	return p.status
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞–π–ø–ª–∞–π–Ω
func (p *pipelineImpl) Start(ctx context.Context) error {
	p.mu.Lock()
	defer p.mu.Unlock()

	if p.status != Stopped {
		return fmt.Errorf("cannot start, pipeline status: %v", p.status)
	}

	p.status = Starting
	p.ctx, p.cancel = context.WithCancel(ctx)

	p.createChannels()
	p.startStages()

	p.status = Running
	fmt.Printf("‚úÖ Pipeline started with %d stages\n", len(p.stages))
	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞–π–ø–ª–∞–π–Ω
func (p *pipelineImpl) Stop() error {
	p.mu.Lock()
	if p.status != Running {
		p.mu.Unlock()
		return fmt.Errorf("cannot stop, pipeline status: %v", p.status)
	}
	p.status = Stopping
	p.mu.Unlock()

	fmt.Printf("‚èπÔ∏è  Stopping pipeline...\n")

	if p.cancel != nil {
		p.cancel()
	}

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Ö–æ–¥–Ω–æ–π –∫–∞–Ω–∞–ª ‚Äî —ç—Ç–æ —Å–∏–≥–Ω–∞–ª –ø–µ—Ä–≤–æ–π —Å—Ç–∞–¥–∏–∏ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
	close(p.inputChan)

	p.wg.Wait()
	p.closeChannels()

	p.mu.Lock()
	p.status = Stopped
	p.mu.Unlock()

	fmt.Printf("‚èπÔ∏è  Pipeline stopped successfully\n")
	return nil
}

// AddStage –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —ç—Ç–∞–ø –≤ –ø–∞–π–ø–ª–∞–π–Ω
func (p *pipelineImpl) AddStage(stage Stage) error {
	p.mu.Lock()
	defer p.mu.Unlock()

	if p.status != Stopped {
		return fmt.Errorf("cannot add stage, pipeline status: %v", p.status)
	}

	p.stages = append(p.stages, stage)
	return nil
}

// createChannels —Å–æ–∑–¥–∞–µ—Ç –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏
func (p *pipelineImpl) createChannels() {
	stageCount := len(p.stages)
	if stageCount <= 1 {
		p.channels = nil
		return
	}

	p.channels = make([]chan *stages.SerializedData, stageCount-1)
	for i := 0; i < stageCount-1; i++ {
		p.channels[i] = make(chan *stages.SerializedData, p.bufferSize)
		fmt.Printf("üîó Created intermediate channel %d with buffer size %d\n", i, p.bufferSize)
	}
}

// startStages –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —ç—Ç–∞–ø—ã –ø–∞–π–ø–ª–∞–π–Ω–∞
func (p *pipelineImpl) startStages() {
	// –°–æ–∑–¥–∞—ë–º –∫–∞–Ω–∞–ª—ã –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç–∞–¥–∏–∏
	readyChans := make([]chan bool, len(p.stages))
	for i := range readyChans {
		readyChans[i] = make(chan bool, 1) // –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å—Ç–∞–¥–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
	for i, stage := range p.stages {
		inputChan := p.getInputChannel(i)
		outputChan := p.getOutputChannel(i)
		readyChan := readyChans[i]

		p.wg.Add(1)

		go func(s Stage, in <-chan *stages.SerializedData, out chan<- *stages.SerializedData, ready chan<- bool, index int) {
			defer p.wg.Done()

			fmt.Printf("‚ñ∂Ô∏è  Stage '%s' started\n", s.Name())

			err := s.Run(p.ctx, in, out, ready)
			if err != nil && err != context.Canceled && err != context.DeadlineExceeded {
				fmt.Printf("Stage '%s' finished with error: %v\n", s.Name(), err)
			} else {
				fmt.Printf("Stage '%s' finished successfully\n", s.Name())
			}

			if index == len(p.stages)-1 && out != nil {
				close(out)
			}
		}(stage, inputChan, outputChan, readyChan, i)
	}

	fmt.Printf("Waiting for all %d stages to initialize...\n", len(p.stages))
	for i, ready := range readyChans {
		<-ready
		fmt.Printf("‚úÖ Stage '%s' is ready\n", p.stages[i].Name())
	}
	fmt.Printf("All stages ready! Pipeline is running.\n")
}

// getInputChannel –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ö–æ–¥–Ω–æ–π –∫–∞–Ω–∞–ª –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç–∞–¥–∏–∏
func (p *pipelineImpl) getInputChannel(stageIndex int) <-chan *stages.SerializedData {
	if stageIndex == 0 {
		return p.inputChan // –ü–µ—Ä–≤–∞—è —Å—Ç–∞–¥–∏—è —á–∏—Ç–∞–µ—Ç –∏–∑ –≤—Ö–æ–¥–∞
	}
	return p.channels[stageIndex-1] // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö
}

// getOutputChannel –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã—Ö–æ–¥–Ω–æ–π –∫–∞–Ω–∞–ª –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç–∞–¥–∏–∏
func (p *pipelineImpl) getOutputChannel(stageIndex int) chan<- *stages.SerializedData {
	if stageIndex == len(p.stages)-1 {
		return p.outputChan // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–∏—à–µ—Ç –≤ –≤—ã—Ö–æ–¥
	}
	return p.channels[stageIndex] // –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ
}

// closeChannels –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –∫–∞–Ω–∞–ª—ã –ø–∞–π–ø–ª–∞–π–Ω–∞
func (p *pipelineImpl) closeChannels() {
	for _, ch := range p.channels {
		close(ch)
	}
	if p.outputChan != nil {
		close(p.outputChan)
	}
	fmt.Printf("CloseOperation: Closed all pipeline channels\n")
}
