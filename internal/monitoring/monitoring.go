package monitoring

import (
	"context"
	"log"
	"time"

	"github.com/nashabanov/ueba-event-generator/internal/metrics"
)

// Monitor –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
type Monitor struct {
	interval time.Duration
	metrics  *metrics.PerformanceMetrics
}

func NewMonitor(interval time.Duration) *Monitor {
	return &Monitor{
		interval: interval,
		metrics:  metrics.GetGlobalMetrics(),
	}
}

func (m *Monitor) Start(ctx context.Context) {
	ticker := time.NewTicker(m.interval)
	defer ticker.Stop()

	log.Printf("üìä Monitor –∑–∞–ø—É—â–µ–Ω: –∏–Ω—Ç–µ—Ä–≤–∞–ª %v", m.interval)

	for {
		select {
		case <-ticker.C:
			// –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
			log.Printf("%s", m.metrics.String())

		case <-ctx.Done():
			log.Printf("üìä Monitor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
			// –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
			log.Printf("=== –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===")
			log.Printf("%s", m.metrics.String())
			return
		}
	}
}
