package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"os/signal"
	"strings"
	"syscall"
	"time"

	"github.com/nashabanov/ueba-event-generator/internal/config"
	"github.com/nashabanov/ueba-event-generator/internal/domain/event"
	"github.com/nashabanov/ueba-event-generator/internal/pipeline/coordinator"
	"github.com/nashabanov/ueba-event-generator/internal/pipeline/stages"
)

// Application –æ—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
type Application struct {
	config    *config.Config
	pipeline  coordinator.Pipeline
	genStage  *stages.EventGenerationStage // ‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞–¥–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
	sendStage *stages.NetworkSendingStage  // ‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞–¥–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏
}

// NewApplication —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
func NewApplication(cfg *config.Config) *Application {
	return &Application{
		config: cfg,
	}
}

// Run –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
func (app *Application) Run() error {
	// –°–æ–∑–¥–∞–µ–º pipeline –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	if err := app.createPipeline(); err != nil {
		return fmt.Errorf("failed to create pipeline: %w", err)
	}

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ duration –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	if app.config.Generator.Duration > 0 {
		log.Printf("Application will run for: %v", app.config.Generator.Duration)
		ctx, cancel = context.WithTimeout(ctx, app.config.Generator.Duration)
		defer cancel()
	}

	app.setupSignalHandling(cancel)

	log.Printf("Starting pipeline with 2 stages...")

	// –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
	go app.monitorExecution(ctx)

	go func() {
		if err := app.pipeline.Start(ctx); err != nil {
			log.Printf("Pipeline error: %v", err)
			cancel()
		}
	}()

	<-ctx.Done()

	log.Println("Stopping pipeline...")
	if err := app.pipeline.Stop(); err != nil {
		log.Printf("Error stopping pipeline: %v", err)
	}

	// –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	app.printFinalStats()

	log.Println("Application stopped successfully")
	return nil
}

// createPipeline —Å–æ–∑–¥–∞–µ—Ç pipeline –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
func (app *Application) createPipeline() error {
	app.pipeline = coordinator.NewPipeline(app.config.Pipeline.BufferSize)

	// –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–¥–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
	genStage, err := app.createGenerationStage()
	if err != nil {
		return fmt.Errorf("failed to create generation stage: %w", err)
	}
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞–¥–∏—é
	app.genStage = genStage.(*stages.EventGenerationStage)

	// –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–¥–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏
	sendStage, err := app.createSendingStage()
	if err != nil {
		return fmt.Errorf("failed to create sending stage: %w", err)
	}
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞–¥–∏—é
	app.sendStage = sendStage.(*stages.NetworkSendingStage)

	// –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å coordinator
	genAdapter := stages.NewGenerationAdapter(genStage, app.config.Pipeline.BufferSize)
	sendAdapter := stages.NewSendingAdapter(sendStage, app.config.Pipeline.BufferSize)

	// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–¥–∏–∏ –≤ pipeline
	if err := app.pipeline.AddStage(genAdapter); err != nil {
		return fmt.Errorf("failed to add generation stage: %w", err)
	}

	if err := app.pipeline.AddStage(sendAdapter); err != nil {
		return fmt.Errorf("failed to add sending stage: %w", err)
	}

	log.Printf("Pipeline created: Generator=%s, Sender=%s",
		genStage.Name(), sendStage.Name())

	return nil
}

// createGenerationStage —Å–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–¥–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
func (app *Application) createGenerationStage() (stages.GenerationStage, error) {
	genStage := stages.NewEventGenerationStage(
		app.config.Generator.Name,
		app.config.Generator.EventsPerSecond,
	)

	eventTypes, err := app.parseEventTypes()
	if err != nil {
		return nil, fmt.Errorf("failed to parse event types: %w", err)
	}

	if err := genStage.SetEventTypes(eventTypes); err != nil {
		return nil, fmt.Errorf("failed to set event types: %w", err)
	}

	log.Printf("Generation stage configured: %d events/sec, types=%v",
		app.config.Generator.EventsPerSecond,
		app.config.Generator.EventTypes)

	return genStage, nil
}

// createSendingStage —Å–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–¥–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
func (app *Application) createSendingStage() (stages.SendingStage, error) {
	sendStage := stages.NewNetworkSendingStage(app.config.Sender.Name)

	if err := sendStage.SetDestinations(app.config.Sender.Destinations); err != nil {
		return nil, fmt.Errorf("failed to set destinations: %w", err)
	}

	if err := sendStage.SetProtocol(app.config.Sender.Protocol); err != nil {
		return nil, fmt.Errorf("failed to set protocol: %w", err)
	}

	log.Printf("Sending stage configured: protocol=%s, destinations=%v",
		app.config.Sender.Protocol,
		app.config.Sender.Destinations)

	return sendStage, nil
}

// parseEventTypes –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –≤ EventType
func (app *Application) parseEventTypes() ([]event.EventType, error) {
	eventTypes := make([]event.EventType, len(app.config.Generator.EventTypes))

	for i, typeStr := range app.config.Generator.EventTypes {
		switch strings.ToLower(typeStr) {
		case "netflow":
			eventTypes[i] = event.EventTypeNetflow
		case "syslog":
			eventTypes[i] = event.EventTypeSyslog
		default:
			return nil, fmt.Errorf("unsupported event type: %s", typeStr)
		}
	}

	return eventTypes, nil
}

// monitorExecution –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
func (app *Application) monitorExecution(ctx context.Context) {
	ticker := time.NewTicker(10 * time.Second)
	defer ticker.Stop()

	startTime := time.Now()

	for {
		select {
		case <-ticker.C:
			app.printCurrentStats(startTime)
		case <-ctx.Done():
			return
		}
	}
}

// printCurrentStats –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
func (app *Application) printCurrentStats(startTime time.Time) {
	duration := time.Since(startTime)

	var generated, sent, failed uint64
	if app.genStage != nil {
		generated = app.genStage.GetGeneratedCount()
	}
	if app.sendStage != nil {
		sent = app.sendStage.GetSentCount()
		failed = app.sendStage.GetFailedCount()
	}

	rate := float64(generated) / duration.Seconds()

	log.Printf("üìä Stats: Generated=%d, Sent=%d, Failed=%d, Rate=%.1f/sec, Runtime=%v",
		generated, sent, failed, rate, duration.Truncate(time.Second))
}

// printFinalStats –≤—ã–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
func (app *Application) printFinalStats() {
	log.Printf("=== Final Statistics ===")

	if app.genStage != nil {
		log.Printf("üîÑ Generation: Generated=%d, Errors=%d",
			app.genStage.GetGeneratedCount(), app.genStage.GetFailedCount())
	}

	if app.sendStage != nil {
		log.Printf("üì§ Sending: Sent=%d, Failed=%d",
			app.sendStage.GetSentCount(), app.sendStage.GetFailedCount())
	}

	log.Printf("========================")
}

// setupSignalHandling –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
func (app *Application) setupSignalHandling(cancel context.CancelFunc) {
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	go func() {
		sig := <-sigChan
		log.Printf("Received signal: %v, initiating graceful shutdown...", sig)
		cancel()
	}()
}
